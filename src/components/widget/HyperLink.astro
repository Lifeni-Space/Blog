---
import IconText from '@components/ui/IconText.astro'
import Picture from '@components/widget/Picture.astro'
import { cdn } from '@libs/consts'
import { dateFormat, findContents, parseHref } from '@libs/utils'

export interface Props {
  name: string
  href: string
}
const { name, href } = Astro.props

const { type, id } = parseHref(href)
const entry = id && (await findContents(id))
---

<a
  class="widget not-prose"
  aria-label={name}
  {href}
  target={type === '外部' ? '_blank' : '_self'}
  rel={type === '外部' ? 'nofollow noopener noreferrer' : ''}
  pos="relative"
  flex="~ col"
  w="full"
  m="y-6"
  border="main 1"
  bg="popover"
  shadow="lg hover:xl"
  text="main"
  rounded="md"
  overflow="hidden"
  transition="all"
>
  {
    entry && entry.data.cover && (
      <div p="0 sm:3 sm:b-0">
        <div rounded="sm:~" border="secondary b-1 sm:1" overflow="hidden">
          <Picture
            src={entry.data.cover.image.map(src => `${cdn}${src}`)}
            alt={entry.data.cover.caption}
            classes="aspect-video object-t object-cover"
          />
        </div>
      </div>
    )
  }

  <section
    class={entry && entry.data.cover && 'backdrop-blur'}
    w="full"
    p="x-3 y-3"
    flex="~ col"
  >
    <span
      text="md leading-7 main"
      w="full"
      flex="~ row gap-2 items-center"
      font="bold"
      m="y-0"
      p="y-0.5"
      transition="colors"
    >
      <span
        p="x-1.5 y-0.75"
        bg="yellow-400"
        text="dark-900 xs"
        font="medium"
        rounded="full"
        transform="~ scale-95"
      >
        {type}
      </span>
      <span> {(entry && entry?.data?.name) || name}</span>
      {
        entry && entry?.data?.subtitle && (
          <span text="md secondary truncate" font="leading-7">
            {entry?.data?.subtitle}
          </span>
        )
      }
    </span>
    {
      entry && (
        <span
          class="break-all md:break-word"
          text="sm main justify"
          font="leading-6"
          p="b-1"
        >
          {entry.data.description}
        </span>
      )
    }
    <section flex="~ row items-center justify-between">
      {
        entry && (
          <IconText name="日期" icon="i-ri:time-line" type="time">
            {dateFormat(entry.data.date.created)}
          </IconText>
        )
      }
      <span text="xs secondary" font="mono">{id ? `/${id}` : href}</span>
    </section>
  </section>
</a>
