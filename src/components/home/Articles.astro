---
const files = Astro.fetchContent('../../../contents/articles/*.md') as Article[]

const groups = files
  .sort((a, b) => {
    const unix = (str: string) => new Date(str).getTime()
    return unix(b['create-date']) - unix(a['create-date'])
  })
  .reduce((pre, cur) => {
    const year = cur['create-date'].slice(0, 4)
    const obj = pre
    if (obj.hasOwnProperty(year)) obj[year].push(cur)
    else obj[year] = [cur]
    return obj
  }, {}) as Group
---

<div>
  {Object.keys(groups)
    .sort((a, b) => Number(b) - Number(a))
    .map(year => (
      <section>
        <h2>{year}</h2>
        <ul>
          {groups[year].map(article => (
            <li>
              <a href={`/article/${article.name}`}>
                <time>
                  {article['create-date'].slice(5, 7)}
                  <span>/</span>
                  {article['create-date'].slice(8, 10)}
                </time>
                {article.title}
              </a>
            </li>
          ))}
        </ul>
      </section>
    ))}
</div>

<style lang="less">
  section {
    &:last-of-type {
      margin: 0 0 3rem 0;
    }

    h2 {
      margin: 2rem 0;
      display: flex;
      font-size: 1.5rem;
      font-weight: var(--font-bold);
    }

    ul {
      width: calc(100% + 3rem);
      margin: 0 -1.5rem;
      padding: 0.75rem;
      border-radius: var(--border-radius);
      border: var(--border);
      background-color: var(--background-subtle-r);

      li {
        list-style: none;

        a {
          padding: 0.25rem 0.75rem;
          display: flex;
          align-items: center;
          color: var(--font-primary);
          border-radius: var(--border-radius);
          border: solid var(--border-width) var(--background-subtle-r);
          gap: 1.5rem;

          time {
            display: flex;
            color: var(--font-secondary);
            font-family: var(--font-mono);
          }

          &:after {
            content: '->';
            font-family: var(--font-mono);
            color: var(--font-secondary);
            margin-left: auto;
            opacity: 0;
            visibility: hidden;
            transform: translateX(-0.5rem);
            transition: all 0.2s;
          }

          &:hover,
          &:focus-visible {
            text-decoration: none;
            border: var(--border);
            background-color: var(--background-r);
            outline-offset: 0;

            &:after {
              opacity: 1;
              visibility: visible;
              transform: translateX(0);
            }
          }
        }
      }
    }
  }
</style>
