---
import Group from '../base/Group.astro'

const files = Astro.fetchContent('../../../contents/articles/*.md') as Article[]

const key: 'date' | 'create-date' = 'create-date'

const groups = files
  .sort((a, b) => {
    const unix = (str: string) => new Date(str).getTime()
    return unix(b[key]) - unix(a[key])
  })
  .reduce((pre, cur) => {
    const year = cur[key].slice(0, 4)
    const obj = pre
    if (obj.hasOwnProperty(year)) obj[year].push(cur)
    else obj[year] = [cur]
    return obj
  }, {}) as Group

const updates = files
  .sort((a, b) => {
    const unix = (str: string) => new Date(str).getTime()
    return unix(b['date']) - unix(a['date'])
  })
  .slice(0, 4)

const formatter = (article: Article) =>
  `创建时间：${article['create-date'].slice(0, 10)}
修改时间：${article['date'].slice(0, 10)}`
---

<div>
  <Group title="最近更新">
    {updates.map(article => (
      <li>
        <a href={`/article/${article.name}`}>
          <time title={formatter(article)}>
            {article['date'].slice(5, 7)}
            <span>/</span>
            {article['date'].slice(8, 10)}
          </time>
          <h3 title={article.description}>{article.title}</h3>
        </a>
      </li>
    ))}
  </Group>

  {Object.keys(groups)
    .sort((a, b) => Number(b) - Number(a))
    .map(year => (
      <Group title={year}>
        {groups[year].map(article => (
          <li>
            <a href={`/article/${article.name}`}>
              <time title={formatter(article)}>
                {article[key].slice(5, 7)}
                <span>/</span>
                {article[key].slice(8, 10)}
              </time>
              <h3 title={article.description}>{article.title}</h3>
            </a>
          </li>
        ))}
      </Group>
    ))}
</div>

<style lang="less">
  div {
    margin: 2rem 0 0 0;

    @media (max-width: 36rem) {
      margin: 1rem 0 0 0;
    }

    @media (max-width: 28rem) {
      margin: 0;
    }

    li {
      width: 100%;
      list-style: none;

      a {
        width: 100%;
        padding: 0.25rem 0.75rem;
        display: flex;
        align-items: center;
        color: var(--font-primary);
        border-radius: var(--border-radius);
        border: solid var(--border-width) var(--card-background);
        gap: 1.5rem;

        time {
          display: flex;
          color: var(--font-secondary);
          font-family: var(--font-mono);
        }

        h3 {
          font-size: inherit;
          font-weight: inherit;
          flex: 1;
          text-overflow: ellipsis;
          overflow: hidden;
          white-space: nowrap;
        }

        &:after {
          content: '->';
          font-family: var(--font-mono);
          color: var(--font-secondary);
          margin-left: auto;
          opacity: 0;
          visibility: hidden;
          transform: translateX(-0.5rem);
          transition: all 0.2s;

          @media (max-width: 36rem) {
            display: none;
          }
        }

        &:hover,
        &:focus-visible {
          text-decoration: none;
          border: var(--border);
          background-color: var(--card-background-focus);
          outline-offset: 0;

          &:after {
            opacity: 1;
            visibility: visible;
            transform: translateX(0);
          }
        }
      }
    }
  }
</style>
