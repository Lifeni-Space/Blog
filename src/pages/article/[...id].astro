---
import Content from '@components/layouts/Content.astro'
import Divider from '@components/ui/Divider.astro'
import { fileBaseUrl } from '@libs/const'
import { format } from '@libs/frontmatter'
import '@libs/shiki.css'
import { Icon } from 'astro-icon/components'
import { getCollection, type CollectionEntry } from 'astro:content'
import dayjs from 'dayjs'
import type { Article } from 'src/types'

export async function getStaticPaths() {
  const articles = (await getCollection('文章')).filter(
    entry => import.meta.env.DEV || !entry.data.draft
  )
  const archives = (await getCollection('存档')).map(({ data, ...props }) => ({
    ...props,
    data: { ...data, ...format(data) },
  }))
  return [...articles, ...archives].map(entry => ({
    params: { id: entry.data.id },
    props: { entry },
  }))
}

const date = (date: { created: Date; updated: Date }) => {
  const created = dayjs(date.created).format('YYYY 年 MM 月 DD 日')
  const updated = dayjs(date.updated).format('YYYY 年 MM 月 DD 日')
  if (created === updated) return `发布于 ${updated}`
  return `更新于 ${created}`
}

const { entry } = Astro.props as { entry: CollectionEntry<'文章'> }
const { Content: Markdown, headings } = await entry.render()
export const prerender = true
---

<Content type="notebook">
  <article
    slot="main"
    class="prose dark:prose-invert prose-headings:scroll-mt-8 prose-img:rounded w-full px-12 py-10"
  >
    {
      entry.data.cover && (
        <img
          class="w-full rounded-md aspect-video object-cover shadow-xl"
          src={`${fileBaseUrl}${entry.data.cover.image}`}
          alt={entry.data.cover.caption}
        />
      )
    }

    <span
      class="flex flex-row gap-2 py-2 items-center leading-6 font-bold text-light-600 dark:text-dark-200"
    >
      {
        entry.data.tags ? (
          entry.data.tags.map((tag: string) => <span>{tag}</span>)
        ) : (
          <span>存档</span>
        )
      }
      <span>|</span>
      <time>
        {date(entry.data.date)}
      </time>
    </span>

    <h1 class="flex flex-row items-center gap-4">
      <span class="leading-[1.5] text-3xl">{entry.data.name}</span>
      {
        entry.data.subtitle && (
          <span class="lead my-0 text-2xl">{entry.data.subtitle}</span>
        )
      }
    </h1>

    <Markdown />

    <span
      class="mt-12 text-sm text-light-600 dark:text-dark-200 flex flex-row gap-2 items-center"
    >
      <Icon name="tabler:copyright" class="w-4 h-4" />
      {entry.data.license}
    </span>
  </article>
  <div slot="side" class="w-full flex flex-col gap-6 py-10 px-10">
    <h2
      class="py-2 font-bold flex flex-row gap-2 items-center text-light-600 dark:text-dark-200"
    >
      <Icon name="tabler:notes" class="w-6 h-6" />
      <span>在这篇文章中</span>
    </h2>
    <ul>
      {
        headings
          .filter(({ depth }) => depth < 4)
          .map(({ depth, slug, text }) => (
            <li
              class:list={[
                depth === 2
                  ? 'py-2 font-bold'
                  : 'py-1 text-light-600 dark:text-dark-200 text-sm',
              ]}
            >
              <a
                href={`#${slug}`}
                class="leading-6 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors"
              >
                {text}
              </a>
            </li>
          ))
      }
    </ul>
  </div>
</Content>
